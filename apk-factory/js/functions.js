/**
 * APK Factory
 * 
 * @title      APK Factory Demo
 * @desc       The APK Factory functionality
 * @copyright  (c) 2014-2021, Mark Jivko
 * @author     Mark Jivko https://markjivko.com
 * @package    apk-factory
 * @license    GPL v3+, https://gnu.org/licenses/gpl-3.0.txt
 */
$(document).ready(() => {
    var global = {
        data: {
            ready: false,
            scrollOk: false,
            enterFrame: {}
        },
        
        // jQuery objects
        objects : {
            loading: $('[data-role="loading"]'),
            scrollDown: $('[data-role="scroll-down"]'),
            typewriter: $('[data-effect="typewriter"]'),
            phone: $('[data-effect="phone"]'),
            phoneCircle: null,
            frame1: $('[data-frame="1"]'),
            frame2: $('[data-frame="2"]'),
            frame3: $('[data-frame="3"]'),
            frame4: $('[data-frame="4"]'),
            frame5: $('[data-frame="5"]'),
            pipes: {
                1: $('[data-frame="1"] [data-effect$="pipe"], [data-frame="2"] [data-effect$="pipe"][data-dir="ltr"]'),
                2: $('[data-frame="2"] [data-effect$="pipe"][data-dir="rtl"], [data-frame="3"] [data-effect$="pipe"][data-dir="ltr"]'),
                3: $('[data-frame="3"] [data-effect$="pipe"][data-dir="rtl"], [data-frame="4"] [data-effect$="pipe"][data-dir="ltr"]'),
                4: $('[data-frame="4"] [data-effect$="pipe"][data-dir="rtl"], [data-frame="5"] [data-effect$="pipe"][data-dir="ltr"]'),
            }
        },
        
        // Timers (integers, created with window.setTimeout)
        timers: {
            typewriter: null,
            framePipes: {}
        },
        
        // Common methods
        methods: {
            loadSprite: () => {
                if (!global.data.ready) {
                    window.setTimeout(() => {
                        $('<img>').on('load', () => {
                            // Mark the document as ready
                            global.data.ready = true;
                            $('body').addClass('ready');

                            // Enter the first frame
                            global.methods.setActive(global.objects.frame1);
                            window.setTimeout(() => {
                                global.objects.loading.remove();
                            }, 500);
                            window.setTimeout(() => {
                                global.methods.typewriterStart();
                            }, 2000);
                        }).attr('src', './img/sprite.png');
                    }, 500);
                }
            },
            initHtml: () => {
                    // Global animations
                    $('[data-effect="anim"]').each((k,v) => {
                        $(v).append('<div></div>');

                        // Animation speed (ms)
                        var animationSpeed = parseInt($(v).attr('data-speed'), 10);
                        if (isNaN(animationSpeed)) {
                            animationSpeed = 1000;
                        }

                        if (animationSpeed > 0 && 1000 !== animationSpeed) {
                            $(v).children('div').css({
                                "animation-duration": `${animationSpeed}ms`
                            });
                        }
                    });

                    // HTML structure
                    $('[data-effect="ripples"]').html(
                        `<svg preserveAspectRatio="none" viewBox="0 0 999 925" fill="none" xmlns="http://www.w3.org/2000/svg">
                            ${[
                                'M485.295 521.442C479.807 520.032 475.753 523.88 470.68 527.904C464.423 532.658 458.792 542.547 446.294 520.324C441.741 512.197 441.233 498.65 431.109 482.571C424.245 471.697 402.709 444.22 438.097 438.097C457.7 434.705 486.164 449.183 495.138 464.674C501.15 475.172 478.907 484.527 490.207 498.304C496.586 506.378 504.056 519.245 500.854 523.47C497.863 527.396 490.529 522.897 485.295 521.442Z',
                                'M512.94 458.448C521.375 469.312 498.432 482.197 507.293 500.067C508.498 502.481 509.746 505.15 510.739 507.862C514.406 516.929 520.873 525.512 519.585 530.192C517.808 538.104 510.792 536.958 503.698 536.875C496.095 536.879 489.24 541.212 480.452 541.946C469.583 542.778 467.306 552.349 452.927 541.989C449.045 539.252 444.849 540.765 440.752 530.723C437.56 522.884 434.25 523.457 431.988 514.933C429.032 503.908 432.635 495.942 417.939 482.228C400.466 466.11 392.511 423.172 433.02 420.883C434.337 420.917 435.654 420.951 437.015 421.24C451.512 423.19 461.499 430.901 487.996 443.098C497.875 447.157 507.545 451.515 512.94 458.448Z',
                                'M530.487 452.265C541.39 463.751 517.281 480.509 524.081 501.62C525.119 504.587 525.946 507.853 526.773 511.118C529.431 521.934 538.621 531.094 538.572 536.871C538.307 548.979 531.31 550.976 522.101 552.307C512.593 553.428 502.042 557.614 490.478 555.944C473.215 553.162 473.846 565.901 452.829 553.543C447.287 550.307 441.25 556.334 435.762 541.288C431.312 529.21 425.696 534.639 422.862 522.806C418.946 507.75 428.625 500.045 405.067 482.095C377.239 460.689 383.043 403.309 428.243 403.879C430.069 403.825 431.728 404.325 433.388 404.824C449.897 409.31 454.513 420.835 496.622 436.885C508.882 441.057 522.791 444.157 530.487 452.265Z',
                                'M548.289 446.038C561.15 458.234 537.614 478.301 540.869 503.173C541.231 506.781 541.892 510.6 542.553 514.419C544.203 526.982 554.841 536.941 557.049 543.638C562.37 559.237 551.574 565.038 540.206 567.53C528.837 570.021 514.801 573.761 500.162 569.477C476.672 562.528 479.79 579.033 452.089 564.422C444.887 560.686 437.053 571.481 430.131 551.178C424.424 534.859 416.8 545.356 413.095 530.002C408.474 510.874 423.974 503.472 391.765 480.988C353.328 454.338 373.189 382.727 423.034 385.901C425.159 386.058 427.117 386.768 429.33 387.434C447.807 394.201 447.141 410.049 504.775 429.444C520.143 434.913 538.248 436.5 548.289 446.038Z',
                                'M565.836 439.855C580.655 452.761 555.656 476.491 557.701 504.98C557.897 509.142 558.137 513.558 558.376 517.974C559.061 532.539 572.676 543.032 575.824 550.616C583.422 570.278 571.838 579.1 558.609 582.962C545.38 586.825 527.857 590.119 510.188 583.474C480.725 572.315 486.33 592.585 451.946 575.722C443.34 571.442 433.709 587.006 425.098 561.488C418.176 541.185 408.203 556.283 403.714 537.918C398.133 514.761 420.008 507.829 378.894 480.856C330.102 448.918 363.765 363.118 418.212 368.643C420.89 368.966 423.147 369.887 425.448 371.062C445.937 380.365 439.988 400.536 513.147 423.275C531.149 428.813 553.494 429.142 565.836 439.855Z',
                                'M583.383 433.672C600.46 447.499 574.461 474.548 574.489 506.533C574.519 511.248 574.293 516.007 574.366 520.976C574.043 537.289 590.889 548.271 594.512 557.084C604.342 580.556 592.312 592.863 576.968 598.141C561.879 603.374 541.081 605.924 520.127 596.963C484.436 581.638 492.528 605.672 451.506 586.811C441.239 582.032 429.811 602.365 419.511 571.633C411.331 547.089 399.306 567 393.99 545.37C387.45 518.183 415.401 511.511 365.425 480.302C306.025 443.12 353.578 343.642 412.837 351.218C415.77 351.498 418.624 352.839 421.224 354.225C443.936 365.765 432.493 390.558 521.177 416.642C542.199 422.968 568.74 421.785 583.383 433.672Z',
                                'M601.185 427.445C620.22 441.982 593.521 472.561 591.532 508.041C591.14 513.353 590.748 518.665 590.4 524.232C589.322 542.249 610.374 553.29 613.243 563.807C621.154 592.854 612.575 606.925 595.327 613.318C578.333 619.667 554.093 622.026 530.108 610.706C488.445 591.17 498.769 619.013 451.319 597.856C439.393 592.578 426.124 617.424 414.434 581.688C405.25 552.861 390.708 577.927 384.775 552.733C377.531 521.472 411.347 515.358 352.72 479.616C282.965 437.146 344.11 323.778 408.226 333.661C411.712 334.107 414.61 335.703 417.763 337.255C442.443 351.077 425.507 380.491 530.224 409.832C553.46 416.824 583.986 414.426 601.185 427.445Z',
                                'M618.732 421.262C639.725 436.509 612.581 470.574 608.109 509.893C607.551 515.758 606.738 521.667 605.969 527.831C603.883 547.596 628.166 559.127 631.764 570.828C641.951 603.94 632.839 620.987 613.52 629.05C594.665 636.77 567.194 638.639 539.924 625.003C492.288 601.256 505.143 633.119 451.01 609.709C437.424 603.931 422.358 633.546 409.234 592.552C398.792 559.485 382.199 589.364 375.483 561.158C367.279 525.868 407.426 519.97 339.893 479.738C259.528 432.024 334.818 304.934 403.493 316.912C407.277 317.568 410.729 319.331 413.925 321.138C440.828 337.197 418.188 371.531 538.597 403.663C564.466 410.724 599.232 407.068 618.732 421.262Z',
                                'M636.578 415.29C659.573 431.501 631.685 468.841 625.196 511.656C624.216 518.119 623.237 524.581 622.047 531.342C618.952 552.855 646.212 564.919 650.539 577.806C663.003 614.981 653.147 635.303 631.922 644.482C610.953 653.617 580.206 654.742 549.906 638.746C496.297 610.788 511.385 646.46 450.569 620.798C435.279 614.267 418.46 648.904 403.902 602.652C392.202 565.345 373.347 600.335 366.014 568.565C356.894 529.5 403.073 523.608 326.679 479.14C235.705 426.182 324.841 285.159 398.372 299.443C402.455 300.31 406.46 302.239 409.999 304.511C439.124 322.808 411.035 362.018 546.924 397.24C575.472 404.624 614.478 399.71 636.578 415.29Z',
                                'M654.125 409.107C679.079 426.029 650.49 466.898 641.984 513.208C640.838 520.224 639.183 527.328 638.037 534.344C633.933 557.604 664.38 569.904 669.481 584.23C683.967 625.513 673.831 648.768 650.281 659.66C627.451 670.166 593.473 670.801 559.634 652.533C500.052 620.365 517.583 659.547 450.172 632.142C433.222 625.111 414.562 664.263 398.614 613.007C385.656 571.46 364.749 611.262 356.589 576.227C346.51 533.133 398.808 527.754 313.763 478.753C212.435 420.507 315.206 265.849 393.506 281.93C398.142 282.963 402.147 284.893 406.284 287.586C437.377 308.164 403.838 352.251 555.463 390.518C586.777 398.735 629.725 392.352 654.125 409.107Z',
                                'M671.927 402.88C698.883 420.766 669.594 465.166 658.816 515.016C657.205 522.374 655.427 530.286 653.86 537.899C648.792 563.162 682.172 575.741 688.002 591.251C704.764 636.598 693.884 663.128 668.43 675.137C643.695 686.759 606.486 686.904 569.406 666.575C503.851 630.196 523.614 673.188 449.52 643.53C430.911 635.999 410.454 679.92 392.817 623.45C378.601 577.662 355.387 622.322 346.655 583.977C335.871 536.809 394.245 531.69 300.084 478.497C188.146 415.008 304.808 246.671 387.921 264.804C392.812 265.793 397.414 268.144 401.595 271.091C434.91 293.907 395.668 342.914 563.028 384.227C597.784 392.635 644.971 384.995 671.927 402.88Z',
                                'M689.474 396.698C718.389 415.294 688.4 463.223 675.604 516.569C673.572 524.524 671.584 532.735 669.64 541.2C663.563 568.21 700.175 581.279 706.48 598.018C725.518 647.429 714.104 676.936 686.535 690.359C659.94 703.352 619.245 703.052 579.09 680.108C507.562 639.518 529.557 686.319 449.08 654.619C428.811 646.589 406.557 695.278 387.485 633.55C372.011 583.523 346.79 633.25 337.23 591.639C325.487 540.442 389.981 535.837 287.125 477.856C164.833 409.078 295.13 227.107 383.055 247.291C388.499 248.447 393.4 251.008 397.924 254.42C433.462 279.474 388.515 333.401 571.567 377.506C609.045 386.491 659.963 377.681 689.474 396.698Z',
                                'M707.276 390.471C738.193 410.031 707.459 461.236 692.647 518.077C690.448 526.586 688.039 535.394 685.928 544.412C678.843 573.171 718.431 586.773 725.72 604.653C747.035 658.127 734.877 690.91 705.447 705.704C676.991 720.067 633.065 719.277 589.625 694.018C512.124 649.217 536.606 699.783 449.191 665.875C427.263 657.346 403.212 710.803 382.706 643.816C365.974 589.549 338.447 644.133 328.314 599.212C315.611 543.986 386.181 539.641 274.718 477.38C141.817 403.359 286.005 207.709 378.742 229.945C384.485 231.311 389.684 234.083 394.761 237.662C432.522 264.953 382.126 323.756 580.659 370.951C620.095 380.646 675.209 370.323 707.276 390.471Z',
                                'M724.823 384.288C757.743 404.813 726.475 458.995 709.479 519.884C706.859 528.991 704.284 538.352 701.752 547.967C693.658 578.473 736.433 592.311 744.241 611.674C767.832 669.212 754.886 705.015 723.595 721.181C693.025 736.959 646.078 735.38 599.396 708.059C515.923 659.048 542.682 713.678 448.839 677.473C425.251 668.444 399.358 726.416 377.462 654.425C359.726 595.874 329.893 655.314 318.933 607.128C305.526 547.829 382.171 543.744 261.593 477.291C118.336 397.982 276.16 188.698 373.71 212.985C379.752 214.562 385.504 217.5 390.625 221.333C430.609 250.862 374.509 314.585 588.777 364.826C631.101 374.546 690.455 362.965 724.823 384.288Z',
                                'M742.625 378.061C777.503 399.296 745.535 457.008 726.267 521.437C723.481 531.097 720.484 541.055 717.488 551.013C708.385 583.267 754.137 597.638 762.929 618.143C788.796 679.744 775.36 718.779 741.955 736.359C709.479 753.253 659.345 751.44 609.335 721.548C519.889 668.326 549.135 726.721 448.354 688.308C423.36 678.736 395.417 741.52 372.086 664.271C353.092 601.48 320.997 666.031 309.464 614.536C295.098 551.206 377.863 547.636 248.633 476.65C94.7679 392.096 266.227 169.177 368.844 195.472C375.439 197.216 381.49 200.364 386.91 204.408C429.116 236.174 367.312 304.818 597.57 358.06C642.362 368.402 705.745 355.861 742.625 378.061Z',
                                'M760.172 371.878C797.307 394.034 764.34 455.065 743.099 523.244C739.892 533.501 736.474 544.057 733.311 554.568C723.199 588.57 772.182 603.431 781.449 625.164C809.549 690.575 795.413 733.139 759.848 751.88C725.513 770.145 671.893 767.886 618.852 735.634C523.433 678.201 554.911 740.405 447.746 699.951C421.093 689.879 391.352 757.431 366.333 674.968C346.081 607.937 311.934 677.301 299.574 622.54C284.248 555.182 373.089 551.871 234.954 476.395C70.479 386.597 255.829 150 363.214 178.092C370.108 180.045 376.458 183.404 382.475 187.87C426.649 221.918 359.44 295.691 605.345 351.471C653.412 362.557 720.991 348.504 760.172 371.878Z',
                                'M778.018 365.906C817.111 388.771 783.444 453.332 760.185 525.008C756.557 535.862 752.973 546.97 749.643 558.035C738.523 593.785 790.439 608.925 800.734 632.054C831.11 701.528 816.44 747.069 778.804 767.479C742.564 786.86 685.713 784.111 629.431 749.798C528.25 687.856 561.75 754.168 447.902 711.461C419.589 700.889 388.008 772.956 361.598 685.489C340.088 614.219 303.679 688.694 290.702 630.368C274.416 558.98 369.588 555.885 222.592 476.174C47.7623 381.088 246.747 130.856 358.946 161C366.348 162.865 373.041 166.689 379.102 171.409C425.499 207.695 352.586 286.389 614.226 345.214C664.419 356.457 736.237 341.146 778.018 365.906Z',
                                'M795.565 359.723C836.661 383.553 802.25 451.39 776.974 526.56C773.179 537.968 769.173 549.674 765.423 561.336C753.338 599.088 808.441 614.463 819.211 638.821C851.864 712.359 836.405 760.92 796.909 782.701C758.554 803.497 698.726 800.214 638.86 763.375C531.706 697.222 567.693 767.299 447.162 722.34C417.146 711.014 384.066 788.06 355.967 695.379C333.199 619.868 294.739 699.156 280.979 637.82C263.988 562.358 365.025 559.821 209.378 475.576C23.9394 375.246 236.815 111.336 353.826 143.531C361.527 145.607 368.728 149.343 375.132 154.528C423.752 193.051 345.39 276.621 622.51 338.536C675.68 350.313 751.229 333.832 795.565 359.723Z',
                                'M813.367 353.496C856.465 378.291 821.309 449.403 793.806 528.368C789.59 540.372 785.374 552.377 781.202 564.636C768.109 604.136 826.189 620.045 837.688 645.587C872.617 723.189 856.669 774.982 815.014 797.923C774.798 820.09 711.695 816.063 648.588 777.162C535.461 706.799 573.68 780.684 446.511 733.727C414.835 721.903 379.958 803.717 350.425 705.778C326.399 626.027 285.632 710.172 271.045 645.569C253.095 566.079 360.208 563.801 195.699 475.321C-0.0944138 369.703 226.417 92.158 348.24 126.405C356.24 128.692 363.74 132.638 370.741 138.244C421.584 179.005 337.561 267.75 630.374 332.456C686.73 344.468 766.475 326.474 813.367 353.496Z',
                                'M830.914 347.313C875.97 372.818 840.115 447.46 810.594 529.92C806.211 542.478 801.575 555.08 797.236 567.892C783.134 609.14 844.445 625.539 856.674 652.266C893.88 733.931 877.187 789 833.671 813.312C791.595 836.849 725.006 832.377 658.825 790.861C539.725 716.287 580.176 793.982 446.579 744.729C413.243 732.404 376.569 818.987 345.602 715.79C320.318 631.799 277.543 721.011 262.085 652.888C243.175 569.368 356.663 567.561 183.204 474.336C-23.1981 363.474 216.948 72.2949 343.839 108.549C352.392 111.002 360.191 115.16 367.236 121.02C420.301 164.018 330.575 257.683 639.079 325.181C697.991 338.324 781.765 319.37 830.914 347.313Z',
                                'M848.716 341.086C895.775 367.556 859.429 445.429 827.637 531.429C822.833 544.584 817.775 557.783 813.27 571.149C798.16 614.144 862.403 630.822 875.406 658.989C914.888 744.718 897.407 802.807 852.031 828.49C808.05 853.144 738.273 848.436 668.807 804.605C543.734 725.819 586.673 807.279 446.182 756.072C411.186 743.248 372.671 834.345 340.015 725.934C313.473 637.703 268.393 731.772 252.405 660.594C232.791 573.001 352.1 571.497 170.034 473.993C-46.7227 357.843 207.06 53.0288 338.719 91.0798C347.571 93.7438 355.923 98.0678 363.267 104.139C418.554 149.374 323.124 247.96 647.363 318.503C708.997 332.224 797.012 312.012 848.716 341.086Z',
                                'M866.263 334.904C915.324 362.337 877.979 443.53 844.468 533.236C839.244 546.989 834.019 560.741 829.093 574.704C812.974 619.447 880.449 636.615 894.181 665.966C935.896 755.505 917.969 817.08 870.478 844.177C824.636 870.202 751.584 864.749 678.877 818.857C547.831 735.861 593.003 821.13 446.083 767.627C409.428 754.303 369.116 850.169 335.026 736.499C307.48 643.985 260.093 742.909 243.279 668.466C222.749 577.098 348.09 575.6 157.163 473.86C-70.2036 352.466 197.469 33.9739 333.941 74.0769C343.346 76.9069 351.742 81.4849 359.639 87.7229C417.149 135.196 316.059 238.956 656.244 312.247C720.047 326.379 812.003 304.699 866.263 334.904Z',
                                'M884.066 328.677C935.085 356.821 897.294 441.499 861.257 534.789C855.866 549.095 850.22 563.444 844.829 577.75C827.702 624.241 898.153 641.942 912.614 672.479C956.602 766.081 937.89 830.677 888.284 859.188C840.582 886.584 764.299 880.642 688.262 832.179C551.455 744.674 598.902 834.007 445.089 778.549C406.774 764.727 364.666 865.361 329.141 746.433C300.337 649.678 250.688 753.714 233.257 675.707C211.768 580.309 343.228 579.326 143.651 473.052C-94.325 346.414 187.238 14.2429 328.522 56.3969C338.182 59.1839 347.175 64.1829 355.16 70.9299C414.893 120.64 308.188 229.829 664.02 305.657C731.054 320.279 827.25 297.341 884.066 328.677Z',
                                'M901.613 322.494C954.632 351.602 916.1 439.556 878.045 536.342C872.189 550.99 866.421 566.147 860.863 581.006C842.771 629.5 916.365 647.182 931.39 679.456C977.912 777.078 958.452 844.949 906.687 874.621C856.87 903.43 777.566 896.7 698.289 846.177C555.508 754.461 605.188 847.603 444.947 789.849C404.972 775.527 361.022 880.675 324.107 756.743C294.045 655.749 242.345 764.598 224.087 683.325C201.638 583.898 339.429 583.13 130.691 472.41C-117.639 340.484 177.305 -5.27803 323.656 38.884C333.614 41.881 343.162 47.047 351.445 54.004C413.401 105.952 300.991 220.062 672.514 298.681C742.358 314.39 842.54 290.237 901.613 322.494Z',
                                'M919.458 316.522C974.482 346.595 935.203 437.823 895.175 538.359C889.153 553.561 882.964 569.316 876.985 584.772C857.884 635.013 934.456 653.229 950.464 686.644C999.262 788.329 979.062 859.476 925.433 890.519C873.711 920.45 790.965 913.52 708.403 860.684C559.693 765.012 611.562 861.708 444.682 801.957C403.048 787.135 357.301 897.05 318.951 767.861C287.632 662.627 233.669 776.587 214.838 692.005C191.684 588.504 335.34 588.295 117.951 473.041C-140.988 335.871 167.89 -23.3146 319.011 22.645C329.522 25.808 339.069 30.973 347.95 38.352C412.128 92.537 294.014 211.567 681.273 293.232C753.365 308.29 857.786 282.879 919.458 316.522Z',
                                'M968.892 693.157C1069.02 900.55 892.812 986.89 718.086 874.217C563.404 774.334 617.803 875.05 444.197 812.792C401.157 797.427 353.359 912.16 313.321 777.751C280.743 668.277 224.729 787.05 205.07 699.202C180.957 591.672 330.689 591.722 104.694 472.189C-183.351 319.865 205.582 -96.4384 343.681 21.2599C409.872 77.9819 286.475 201.334 689.259 286.344C764.371 302.19 872.777 275.566 937.005 310.339C1002.68 345.91 939.584 466.171 892.765 588.073C872.611 639.807 952.159 658.557 968.892 693.157Z'
                            ].map(d => `<path stroke="#fff" stroke-width="0.5" d="${d}"></path>`).join('')}
                        </svg>`
                    );
                    global.objects.loading.append(
                        '<div><div></div><div></div></div>'
                        + '<svg preserveAspectRatio="none" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">'
                            + '<path d="m-10,501.5l519,-62.5l-520,-37l516,-53l-513,-43l515,-39l-514,-48l514,-45l-513,-48l514,-36l-518,-60l518,-32" fill="none"/>'
                        + '</svg>'
                    );
                    global.objects.phone.prepend('<span><b><i></i></b></span>');
                    $('[data-effect="ribbon"]').append(
                        '<svg preserveAspectRatio="none" viewBox="0 0 800 100" xmlns="http://www.w3.org/2000/svg">'
                            + '<path fill="#ffffff" d="m-19,36.93885c55,-6.32141 61,-29.0785 97,-28.44636c36,0.63214 51,24.02137 115,25.9178c64,1.89642 77,-5.68927 132,-4.42499c55,1.26428 91,22.12495 127,32.87135c36,10.7464 96,-5.05713 120,-12.01069c24,-6.95356 76,-6.32141 107,3.16071c31,9.48212 75,20.86067 115,16.43568c40,-4.42499 80,26.54994 81,56.26059c1,29.71065 -1,32.87135 -52,34.76778c-51,1.89642 -88,-29.71065 -156,-1.26428c-68,28.44636 -171,8.84998 -230,1.89642c-59,-6.95356 -58,-5.68927 -139,-6.32141c-81,-0.63214 -155,17.06782 -199,1.89642c-44,-15.17139 -46,-15.80354 -85,-19.59638c-39,-3.79285 -102,11.37855 -74,-27.18208c28,-38.56063 30,-15.80354 11,-36.6642c-19,-20.86067 -25,-30.97493 30,-37.29634z" />'
                        + '</svg>'
                    );
                    $('[data-effect="h-pipe"]').each((k,v) => {
                        var cornerSvg = '<svg viewBox="0 0 50 50" width="50" height="50" xmlns="http://www.w3.org/2000/svg">'
                            + '<path stroke="#FFEB3B" stroke-linecap="round" stroke-width="10" fill="transparent" d="m50,25c-25,0 -25,25 -25,25" />'
                            + '</svg>';
                        $(v).append(`<div class="corner">${cornerSvg}</div><div class="line"></div>`);
                    });
                    $('[data-effect="load-svg"]').each((k,v) => {
                        $.ajax({
                            url: $(v).attr('data-src'),
                            dataType: 'text',
                            success: function(data) {
                                $(v).append(data);
                            }
                        });
                    });
                    $('[data-effect="bubbles"]').html(
                        ['a','b','c'].map(s => `<div data-effect="bubble" data-bubble="${s}"></div>`).join('')
                    );
                    $('[data-effect="toggle"] li > button').click((e) => {
                        var parentObject = $(e.target).parent();
                        if (!parentObject.hasClass('active')) {
                            $(e.target).parents('[data-effect="toggle"]').children('li').removeClass('active');
                            parentObject.addClass('active');
                        }
                    });
                    $('[data-effect="toggle"] li:first-child > button').click();
            },
            setActive: (frame, active) => {
                if ("undefined" === typeof active) {
                    active = true;
                }
                
                if (active) {
                    !$(frame).hasClass('active') && $(frame).addClass('active');
                } else {
                    $(frame).hasClass('active') && $(frame).removeClass('active');
                }
            },
            typewriterStop: () => {
                if (null !== global.timers.typewriter) {
                    window.clearTimeout(global.timers.typewriter);
                    global.timers.typewriter = null;
                }
            },
            typewriterStart: () => {
                // Typing speed (ms)
                var typingSpeed = parseInt(global.objects.typewriter.attr('data-speed'), 10);
                if (isNaN(typingSpeed)) {
                    typingSpeed = 75;
                }

                // Final delay (ms)
                var typingDelay = parseInt(global.objects.typewriter.attr('data-delay'), 10);
                if (isNaN(typingDelay)) {
                    typingDelay = 2500;
                }

                // Get the active element index
                var activeIndex = -1;
                var children = global.objects.typewriter.children('span');
                children.each((key, child) => {
                    if ($(child).hasClass('active')) {
                        $(child).removeClass('active');
                        if (-1 === activeIndex ) {
                            activeIndex = key;
                        }
                    }
                });
                activeIndex++;
                if (activeIndex >= children.length) {
                    activeIndex = 0;
                }

                // Enable typing
                var typingLength = $(children[activeIndex]).text().length;
                $(children[activeIndex]).addClass('active').css({
                    animation: `anim-typewriter-type ${typingLength * typingSpeed}ms steps(${typingLength}, end)`
                });

                // Next phrase
                global.timers.typewriter = window.setTimeout(global.methods.typewriterStart, typingLength * typingSpeed + typingDelay);
            },
            pipesTrigger: (frameId, start) => {
                if ("undefined" === typeof global.data.enterFrame[frameId]) {
                    global.data.enterFrame[frameId] = false;
                }
                
                if (start) {
                    if (!global.data.enterFrame[frameId]) {
                        global.data.enterFrame[frameId] = true;
                        global.methods.pipesStart(frameId);
                    }
                } else {
                    if (global.data.enterFrame[frameId]) {
                        global.data.enterFrame[frameId] = false;
                        global.methods.pipesStop(frameId);
                    }
                }
            },
            pipesClear: (frameId) => {
                if ("undefined" === typeof global.timers.framePipes[frameId]) {
                    global.timers.framePipes[frameId] = [];
                } else {
                    global.timers.framePipes[frameId].forEach((v) => {
                        window.clearTimeout(v);
                    });
                    global.timers.framePipes[frameId] = [];
                }
            },
            pipesStop: (frameId) => {
                if ("undefined" !== typeof global.objects.pipes[frameId]) {
                    global.methods.pipesClear(frameId);
                    $(`[data-frame="${frameId}"] [data-role="left"]`).addClass('active');
                    $(`[data-frame="${frameId + 1}"] [data-role="left"]`).removeClass('active');
                    $.each(global.objects.pipes[frameId], (k, v) => {
                        var object = $(v);
                        if (object.hasClass('active')) {
                            global.timers.framePipes[frameId].push(
                                window.setTimeout(
                                    () => {object.removeClass('active');}, 
                                    (global.objects.pipes[frameId].length - k - 1) * 250
                                )
                            );
                        }
                    });
                }
            },
            pipesStart: (frameId) => {
                if ("undefined" !== typeof global.objects.pipes[frameId]) {
                    global.methods.pipesClear(frameId);
                    $(`[data-frame="${frameId}"] [data-role="left"]`).removeClass('active');
                    $(`[data-frame="${frameId + 1}"] [data-role="left"]`).addClass('active');
                    $.each(global.objects.pipes[frameId], (k, v) => {
                        var object = $(v);
                        if (!object.hasClass('active')) {
                            global.timers.framePipes[frameId].push(
                                window.setTimeout(
                                    () => {object.addClass('active');}, 
                                    k * 250
                                )
                            );
                        }
                    });
                }
            }
        }
    };
    
    // Initialize the StoryLine
    $.storyline({
        frames: {
            '[data-frame="1"]': {
                onEnter: () => {
                    if (global.data.ready) {
                        global.methods.setActive(global.objects.frame1);
                        global.methods.typewriterStop();
                        global.methods.typewriterStart();
                    }   
                },
                onLeave: () => {
                    global.methods.setActive(global.objects.frame1, false);
                    global.methods.typewriterStop();
                },
                onActive: (coords, event) => {
                    if (null === global.objects.phoneCircle) {
                       global.objects.phoneCircle = $('[data-effect="phone"] > span > b > i');
                    }
                    global.objects.phoneCircle.css({
                        transform: `scale(${Math.round(Math.abs(coords.percent.frameUnCentered * 1.2), 2)})`
                    });
                }
            },
            '[data-frame="2"]': {
                onEnter: () => {
                    // Hide the scroll
                    if (!global.data.scrollOk) {
                        global.data.scrollOk = true;
                        global.objects.scrollDown.addClass('ok');
                        window.setTimeout(() => {global.objects.scrollDown.remove();}, 1000);
                    }
                    
                    global.methods.setActive(global.objects.frame2);
                    global.methods.pipesStart(1);
                },
                onLeave: () => {
                    global.methods.setActive(global.objects.frame2, false);
                    global.methods.pipesStop(1);
                }                
            },
            '[data-frame="3"]': {
                onEnter: () => {
                    global.methods.setActive(global.objects.frame3);
                },
                onLeave: () => {
                    global.methods.setActive(global.objects.frame3, false);
                },
                onActive: (coord) => {
                    global.methods.pipesTrigger(2, coord.frameTop <= 384);
                }
            },
            '[data-frame="4"]': {
                onEnter: () => {
                    global.methods.setActive(global.objects.frame4);
                },
                onLeave: () => {
                    global.methods.setActive(global.objects.frame4, false);
                },
                onActive: (coord) => {
                    global.methods.pipesTrigger(3, coord.frameTop <= 384);
                }
            },
            '[data-frame="5"]': {
                onEnter: () => {
                    global.methods.setActive(global.objects.frame5);
                },
                onLeave: () => {
                    global.methods.setActive(global.objects.frame5, false);
                },
                onActive: (coord) => {
                    global.methods.pipesTrigger(4, coord.frameTop <= 384);
                }
            }
        },
        logLevel: 'error'
    });
    
    // Initialize the HTML structure
    global.methods.initHtml();
    global.methods.loadSprite();
});

/*EOF*/
